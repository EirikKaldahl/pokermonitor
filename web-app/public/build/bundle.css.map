{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\BlindViewer.svelte",
    "..\\..\\NextBlind.svelte",
    "..\\..\\Timer.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { getContext } from \"svelte\";\r\n  import Timer from \"./Timer.svelte\";\r\n  import BlindsController from \"./BlindsController/BlindsController.svelte\";\r\n  import BlindViewer from \"./BlindsController/BlindViewer.svelte\";\r\n  import NextBlind from \"./BlindsController/NextBlind.svelte\";\r\n  import data from \"./data\";\r\n\r\n  let timeFromUser = data.timePerRound;\r\n  let index = 0;\r\n  let bigBlind = data.blinds[index];\r\n  let smallBlind = bigBlind / 2;\r\n  let nextBigBlind = data.blinds[index+1]\r\n  let nextSmallBlind = nextBigBlind / 2;\r\n  const incLevel = () => {\r\n    index++;\r\n    if (index > data.blinds.length - 1) {\r\n      console.log(\r\n        `Last blind reached, continuing on ${\r\n          data.blinds[data.blinds.length - 1]\r\n        } increments.`,\r\n        \"background:red\"\r\n      );\r\n    }\r\n  };\r\n  console.log(data);\r\n\r\n  // These react to index increment\r\n  $: {\r\n    if (index > data.blinds.length - 1) {\r\n      bigBlind += data.blinds[data.blinds.length - 1];\r\n      nextBigBlind += data.blinds[data.blinds.length - 1];\r\n\r\n    } else {\r\n      bigBlind = data.blinds[index];\r\n      if (index > data.blinds.length - 2){\r\n        nextBigBlind += data.blinds[data.blinds.length - 1];\r\n      } \r\n      else{\r\n        nextBigBlind = data.blinds[index+1];\r\n      }\r\n    }\r\n    smallBlind = Math.round(bigBlind / 2);\r\n    nextSmallBlind = Math.round(nextBigBlind / 2);\r\n    timeFromUser = data.timePerRound;\r\n  }\r\n</script>\r\n\r\n<style>\r\n  main {\r\n    text-align: center;\r\n  }\r\n  h1 {\r\n    margin-top: 0;\r\n    margin-bottom: 50px;\r\n    color: #ff3e00;\r\n    text-transform: uppercase;\r\n    font-size: 13em;\r\n    font-weight: 100;\r\n  }\r\n</style>\r\n\r\n<main>\r\n  <h1>Pokr2kr</h1>\r\n  <Timer {timeFromUser} {incLevel} />\r\n  <BlindViewer {bigBlind} {smallBlind} />\r\n  <NextBlind {nextBigBlind} {nextSmallBlind}/>\r\n</main>\r\n",
    "<script>\r\n  export let bigBlind;\r\n  export let smallBlind;\r\n</script>\r\n\r\n<style>\r\n  .flexContainer {\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    width: 200px;\r\n  }\r\n  .mainWrapper {\r\n    display: flex;\r\n    width: 100%;\r\n    justify-content: center;\r\n  }\r\n</style>\r\n\r\n<div class=\"mainWrapper\">\r\n  <div class=\"flexContainer\">\r\n    <h3>Small Blind</h3>\r\n    <p>{smallBlind}</p>\r\n  </div>\r\n  <div class=\"flexContainer\">\r\n    <h3>Big Blind</h3>\r\n    <p>{bigBlind}</p>\r\n  </div>\r\n</div>\r\n",
    "<script>\r\n    export let nextBigBlind;\r\n    export let nextSmallBlind;\r\n</script>\r\n  \r\n<style>\r\n    .mainWrapper {\r\n      display: flex;\r\n      width: 100%;\r\n      justify-content: center;\r\n    }\r\n    p {\r\n        color: darkseagreen;\r\n    }\r\n</style>\r\n  \r\n<div class=\"mainWrapper\">\r\n      <p>(Next blind level is: {nextSmallBlind}/{nextBigBlind})</p>\r\n</div>\r\n  ",
    "<script>\r\n  import { setContext } from 'svelte';\r\n  export let timeFromUser;\r\n  export let incLevel;\r\n  const resetTimer = () => {\r\n    return timeFromUser * 1000;\r\n  };\r\n  let timeRemaining = resetTimer();\r\n  const audio = new Audio(\r\n    'https://www.soundjay.com/button/beep-01a.mp3'\r\n  );\r\n\r\n  const oneMin = 60 * 1000;\r\n  const tenSec = 10000;\r\n\r\n  const reduceTime = () => {\r\n    if (timeRemaining == oneMin) {\r\n      audio.play();\r\n    }\r\n    if (timeRemaining > 0 && timeRemaining < tenSec) {\r\n      audio.play();\r\n    }\r\n    if (timeRemaining === 0) {\r\n      incLevel();\r\n      timeRemaining = resetTimer();\r\n      clearInterval(interval);\r\n      interval = setInterval(reduceTime, 1000);\r\n    }\r\n    timeRemaining = Math.max(0, timeRemaining - 1000);\r\n  };\r\n  let interval = setInterval(reduceTime, 1000);\r\n</script>\r\n\r\n<style>\r\n  div {\r\n    color: gold;\r\n    display: flex;\r\n    justify-content: center;\r\n    flex-direction: column;\r\n    align-items: center;\r\n  }\r\n\r\n  p {\r\n    font-size: 6rem;\r\n    margin: 0;\r\n  }\r\n</style>\r\n\r\n<div>\r\n  <p>Time left: {timeRemaining / 1000}s</p>\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AAiDE,IAAI,cAAC,CAAC,AACJ,UAAU,CAAE,MAAM,AACpB,CAAC,AACD,EAAE,cAAC,CAAC,AACF,UAAU,CAAE,CAAC,CACb,aAAa,CAAE,IAAI,CACnB,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,IAAI,CACf,WAAW,CAAE,GAAG,AAClB,CAAC;ACrDD,cAAc,eAAC,CAAC,AACd,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,cAAc,CAAE,MAAM,CACtB,KAAK,CAAE,KAAK,AACd,CAAC,AACD,YAAY,eAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,MAAM,AACzB,CAAC;ACVC,YAAY,eAAC,CAAC,AACZ,OAAO,CAAE,IAAI,CACb,KAAK,CAAE,IAAI,CACX,eAAe,CAAE,MAAM,AACzB,CAAC,AACD,CAAC,eAAC,CAAC,AACC,KAAK,CAAE,YAAY,AACvB,CAAC;ACqBH,GAAG,cAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CACb,eAAe,CAAE,MAAM,CACvB,cAAc,CAAE,MAAM,CACtB,WAAW,CAAE,MAAM,AACrB,CAAC,AAED,CAAC,cAAC,CAAC,AACD,SAAS,CAAE,IAAI,CACf,MAAM,CAAE,CAAC,AACX,CAAC"
}